#![cfg_attr(not(all(test, target_arch = "x86_64")), no_std)]

use postcard::{
    serialize_with_flavor,
    flavors::{Cobs, Slice},
};
use serde::{Serialize, Deserialize};

pub const N_LEDS: usize = 300;
pub const N_BYTES: usize = 3;
pub const TOTAL_BYTES: usize = N_LEDS * N_BYTES;

#[derive(PartialEq, Eq, Debug, Deserialize, Serialize)]
pub enum Responce<'b> {
    Ok,
    Error,
    LedAcceptedBufferSpace(u8),
    RadioAcceptedBufferSpace(u8),
    Program(Programs),
    BufferFull,
    Reject,
    RadioRevc(&'b [u8]),
}

#[repr(u8)]
#[derive(PartialEq, Eq, Debug, Copy, Clone, Deserialize, Serialize)]
pub enum Programs {
    Serial = 0,
    One,
    Two,
}

struct FixedVec<'a> {
    buffer: &'a mut [u8],
    len: usize,
}

impl<'a> FixedVec<'a> {
    pub fn new(buf: &'a mut [u8]) -> Self {
        Self {
            buffer: buf,
            len: 0,
         }
    }
    pub fn push(&mut self, val: u8) {
        let l = self.len;
        if l != self.buffer.len() {
            self.buffer[l] = val;
            self.len += 1;
        }
    }
    pub fn into_slice(self) -> &'a mut [u8] {
        &mut self.buffer[0..self.len]
    }
    pub fn len(&self) -> usize {
        self.buffer.len()
    }
    pub fn copy_from_slice(&mut self, data: &[u8]) -> Result<(), ()> {
        let space = self.buffer.len() - self.len;
        if data.len() > space {
            return Err(());
        }
        let end = self.len + data.len();
        self.buffer[self.len..end].copy_from_slice(data);
        self.len += data.len();
        Ok(())
    }
}


#[derive(PartialEq, Eq, Debug)]
pub enum Commands<'a> {
    SetProgram(Programs),
    LedData(&'a [u8]),
    GetProgram,
    RadioChannel(u8),
    RadioSend(&'a [u8]),
}

impl<'a> Commands<'a> {
    pub fn to_slice<'b>(&self, data_buf: &'b mut [u8]) -> Option<&'b mut [u8]> {
        let mut buf = FixedVec::new(data_buf);

        match self {
            Commands::SetProgram(prg) => {
                if buf.len() < 2 {
                    return None;
                }
                buf.push(0x00);
                buf.push(*prg as u8);
            }
            Commands::LedData(data) => {
                //let data = *data;
                let size = data.len();
                buf.push( 0x01);
                buf.push( size as u8);
                buf.push((size >> 8) as u8);
                buf.copy_from_slice(&data[..]).ok()?;
            }
            Commands::GetProgram => {
                buf.push( 0x02);
            }
            Commands::RadioChannel(channel) => {                
                buf.push( 0x03);
                buf.push( *channel);
            },
            Commands::RadioSend(data) => {
                let size = data.len();
                if buf.len() == 0 || 2 + size > u8::MAX.into() {
                    return None;
                }
                buf.push( 0x04);
                buf.push( size as u8);
                buf.copy_from_slice(&data[..]).ok()?;
            }
        }

        Some(buf.into_slice())
    }

    pub fn from_bytes(data: &'a mut [u8]) -> Option<Self> {
        let size = data.len();
                
        match data[0] {
            0 => {
                if size < 2 {
                    return None;
                }
                let prg = match data[1] {
                    0 => Programs::Serial,
                    1 => Programs::One,
                    2 => Programs::Two,
                    _ => return None,
                };
                Some(Self::SetProgram(prg))
            }
            1 => {
                if size < 4 {
                    return None;
                }
                let data_size = data[1] as usize + ((data[2] as usize) << 8);
                if size < (3 + data_size) {
                    return None;
                }
                return Some(Self::LedData(&data[3..3 + data_size]));
            }
            2 => {
                if size < 1 {
                    return None;
                }
                Some(Self::GetProgram)
            }
            3 => {
                if size != 2 { return None }
                return Some(Self::RadioChannel(data[1]))
            }
            4 => {
                if size < 3 {
                    return None;
                }
                let data_size = data[1] as usize;
                if size < (2 + data_size) {
                    return None;
                }
                return Some(Self::RadioSend(&data[2..2 + data_size]));
            }            
            _ => None,
        }
    }
}

#[cfg(test)]
mod tests {
    use postcard::to_slice_cobs;

    use super::Commands;
    use crate::{Programs, TOTAL_BYTES, Responce};

    // #[test]
    // fn it_works() {
    //     let cmd = Programs::One;
    //     let bla = bincode::serialize::<Programs>(&cmd);
    //     println!("ser: Program = {:?}", bla);

    //     let data = [1u8, 0, 0, 0];
    //     let bla = bincode::deserialize::<Programs>(&data[..]);
    //     println!("de: Program = {:?}", bla);
    // }

    #[test]
    fn postcard_commands_setprogram() {
        let mut buf: [u8; 1024] = [0; 1024];
        let frame = Commands::SetProgram(Programs::One);
        let bla = frame.to_slice(&mut buf).unwrap();
        assert_eq!(bla, [0, 1]);

        let frame = Commands::SetProgram(Programs::Serial);
        let bla = frame.to_slice(&mut buf).unwrap();
        assert_eq!(bla, [0, 0]);

        let frame = Commands::SetProgram(Programs::Two);
        let bla = frame.to_slice(&mut buf).unwrap();
        assert_eq!(bla, [0, 2]);
    }

    #[test]
    fn postcard_commands_frame() {
        let mut buf: [u8; 1024] = [0; 1024];

        let frame = Commands::LedData(&[0xAA; TOTAL_BYTES]);
        let bla = frame.to_slice(&mut buf).unwrap();
        // println!("ser: ({}) Frame = {:?}", bla.len(), bla);

        let data = [
            1u8, 132, 3, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170,
        ];

        assert!(bla.len() == data.len());

        let mut value = 0u8;

        for i in 0..bla.len() {
            value |= bla[i] ^ data[i];
        }
        assert!(value == 0);

        let de_frame = Commands::from_bytes(bla).unwrap();

        assert_eq!(frame, de_frame);
    }


    #[test]
    fn postcard_commands_radiochannel() {
        let mut buf: [u8; 16] = [0; 16];

        let data = [0x03, 0x01];

        let frame = Commands::RadioChannel(1);
        let bla = frame.to_slice(&mut buf).unwrap();

        let mut value = 0u8;

        for i in 0..bla.len() {
            value |= bla[i] ^ data[i];
        }
        assert!(value == 0);

        let de_frame = Commands::from_bytes(bla).unwrap();

        assert_eq!(frame, de_frame);
    }

    #[test]
    fn postcard_commands_radiosend_min() {
        let mut buf: [u8; 1024] = [0; 1024];

        let data = [0x04, 0x01, 0x01];

        let frame = Commands::RadioSend(&[0x01]);
        let bla = frame.to_slice(&mut buf).unwrap();

        let mut value = 0u8;

        for i in 0..bla.len() {
            value |= bla[i] ^ data[i];
        }
        assert!(value == 0);

        let de_frame = Commands::from_bytes(bla).unwrap();

        assert_eq!(frame, de_frame);
    }

    #[test]
    fn postcard_commands_radiosend_tolarge() {
        let mut buf: [u8; 1024] = [0; 1024];

        let data = [
            1u8, 132, 3, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170,
        ];

        let frame = Commands::RadioSend(&data);
        let bla = frame.to_slice(&mut buf);

        assert!(bla.is_none());
    }
    #[test]
    fn postcard_commands_radiosend_max() {
        let mut buf: [u8; 1024] = [0; 1024];

        let data = [
            4u8, 253, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170,
            170,
        ];

        let d = &data[2..255];

        let frame = Commands::RadioSend(d);
        // println!("frame: {} {:?}", d.len(), frame);
        let bla = frame.to_slice(&mut buf).unwrap();

        let mut value = 0u8;

        for i in 0..bla.len() {
            value |= bla[i] ^ data[i];
        }
        assert!(value == 0);

        let de_frame = Commands::from_bytes(bla).unwrap();

        assert_eq!(frame, de_frame);
    }   
    
    #[test]
    fn postcard_responce_radiorevc() {
        let mut buf = [0u8; 32];
        let radiodata = [0x0u8, 0x12].as_slice();

        let ed = Responce::RadioRevc(radiodata);

        let used = to_slice_cobs(&ed, &mut buf).unwrap();

        assert_eq!(used, &[0x03, 0x07, 0x02, 0x02, 0x12, 0x00]);

        let red = postcard::from_bytes_cobs::<Responce>(used).unwrap();

        assert_eq!(red, ed);
    }

    #[test]
    fn postcard_responce_program() {
        let mut buf = [0u8; 32];
        let program = Programs::Serial;

        let ed = Responce::Program(program);

        let used = to_slice_cobs(&ed, &mut buf).unwrap();

        assert_eq!(used, &[0x02, 0x04, 0x01, 0x00]);

        let red = postcard::from_bytes_cobs::<Responce>(used).unwrap();

        assert_eq!(red, ed);
    }
}
